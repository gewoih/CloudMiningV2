@using Microsoft.AspNetCore.Mvc.TagHelpers
@model IEnumerable<CloudMining.Domain.Models.ShareablePayment>

@{
	ViewData["Title"] = "Платежи";
}

<div id="app" v-cloak>

	<div class="loading-container" v-if="isLoading">
		<div class="loading-spinner"></div>
		<p class="loading-message">Загрузка данных...</p>
	</div>

	<div v-else>
		<select class="form-select m-3" v-model="selectedPaymentType" @@change="fetchPayments">
			<option selected value="Electricity">Электричество</option>
			<option value="Purchase">Покупки</option>
		</select>

		<div class="table-responsive m-3" :style="{ maxHeight: tableMaxHeight + 'px', overflowY: 'auto' }">
			<table class="table table-striped table-hover display">
				<thead class="sticky-top">
					<tr>
						<th>Сумма</th>
						<th>Дата</th>
						<th>Комментарий</th>
					</tr>
				</thead>
				<tbody>
					<tr v-for="payment in payments" :class="{ 'table-success': payment.isCompleted, 'table-danger': !payment.isCompleted }">
						<td>{{ payment.amount }}</td>
						<td>{{ moment(payment.date).format('DD.MM.YYYY') }}</td>
						<td>{{ payment.caption }}</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>

	<button type="button" class="btn btn-primary float-end m-3" v-on:click="showModal()">Добавить платеж</button>

	<!-- Modal -->
	<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="addPaymentModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-dialog-centered" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="addPaymentModalLabel">Добавление нового платежа</h5>
				</div>
				<div class="modal-body">
					<form id="addPaymentForm">
						<div class="form-group">
							<label for="paymentCaption">Комментарий</label>
							<input type="text" class="form-control" id="paymentCaption" v-model="newPayment.caption">
						</div>
						<div class="form-group">
							<label for="paymentDate">Дата</label>
							<input type="date" class="form-control" id="paymentDate" required v-model="newPayment.date">
						</div>
						<div class="form-group">
							<label for="paymentAmount">Сумма</label>
							<input type="number" class="form-control" id="paymentAmount" required v-model="newPayment.amount">
						</div>
						<div class="modal-footer border-top-0">
							<button type="button" class="btn btn-secondary" v-on:click="closeModal()">Отмена</button>
							<button type="submit" class="btn btn-primary" v-on:click="createPayment()">Сохранить</button>
						</div>
					</form>
				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts
{
	<script>
		const app = Vue.createApp({
			data() {
				return {
					payments: [],
					selectedPaymentType: 'Electricity',
					isLoading: true,
					tableMaxHeight: 0,
					newPayment: {
						paymentType: null,
						currencyCode: 1,
						caption: null,
						amount: null,
						date: null
					},
					headers: {
						'Content-Type': 'application/json'
					}
				};
			},
			async mounted() {
				await this.fetchPayments();
				this.setTableMaxHeight();
			},

			methods: {
				async fetchPayments() {
					this.isLoading = true;

					try {
						const queryParams = {
							paymentType: this.selectedPaymentType
						};

						await axios.get('/api/payments', { params: queryParams });
						this.payments = response.data;
					} catch (error) {
						console.error('Error fetching data:', error);
					} finally {
						this.isLoading = false;
					}
				},

				async createPayment() {
					try {
						const headers = this.headers;
						this.newPayment.paymentType = this.selectedPaymentType;
						const serializedPaymentData = JSON.stringify(this.newPayment);
						await axios.post('/api/payments', serializedPaymentData, { headers });
						await this.fetchPayments();
					}
					catch (error) {
						console.error('Ошибка при создании платежа', error)
					}
				},

				showModal() {
					$("#exampleModal").modal('show');
				},
				closeModal() {
					$("#exampleModal").modal('hide');
				},

				setTableMaxHeight() {
					this.tableMaxHeight = window.innerHeight - 300;
				},

				moment(date) {
					return moment(date);
				},
			}
		});

		app.mount('#app');
	</script>
}